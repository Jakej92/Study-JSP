package com.app.controller.admin;

import java.io.IOException;
import java.util.Optional;

import com.app.Action;
import com.app.Result;
import com.app.domain.vo.AdminVO;
import com.app.repository.admin.AdminDAO;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

public class JoinOkController implements Action {
	
	@Override
	public Result execute(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
	    System.out.println("🚀 JoinOkController 실행됨!");

	    Result result = new Result();
	    AdminDAO adminDAO = new AdminDAO();
	    AdminVO adminVO = new AdminVO();
	    HttpSession session = req.getSession();
	    String path = "/join.admin";

	    // ✅ 세션에서 관리자 객체 가져오기 (Null 체크 추가)
	    AdminVO admin = (AdminVO) session.getAttribute("admin");

	    if (admin == null) {
	        System.out.println("❌ 세션에 저장된 admin 객체가 없습니다. 중복 검사 없이 진행합니다.");
	    } else {
	        System.out.println("✅ 세션에서 가져온 관리자 계정: " + admin.getAdminAccount());
	    }

	    // ✅ 요청된 파라미터 확인
	    String adminAccount = req.getParameter("adminAccount");
	    String adminPassword = req.getParameter("adminPassword");
	    String adminName = req.getParameter("adminName");
	    String adminPhone = req.getParameter("adminPhone");
	    String adminEmail = req.getParameter("adminEmail");

	    adminVO.setAdminAccount(adminAccount);
	    adminVO.setAdminPassword(adminPassword);
	    adminVO.setAdminName(adminName);
	    adminVO.setAdminPhone(adminPhone);
	    adminVO.setAdminEmail(adminEmail);

	    boolean accountFlag = false;

	    // ✅ 세션이 없을 경우에도 중복 검사 가능하도록 수정
	    if (admin == null || !admin.getAdminAccount().equals(adminAccount)) {
	        Optional<AdminVO> foundAdmin = adminDAO.selectByAdminAccount(adminAccount);
	        if (foundAdmin.isPresent()) {
	            System.out.println("❌ 중복된 계정이 있습니다. 회원가입 불가.");
	            path += "?account=false";
	            accountFlag = true;
	        }
	    }

	    if (!accountFlag) {
	        adminDAO.insert(adminVO);
	        System.out.println("✅ 회원가입 성공! 관리자 계정 추가됨.");

	        // ✅ 회원가입 성공 후 세션에 관리자 정보 저장
	        session.setAttribute("admin", adminVO);
	    }

	    result.setPath("/login.admin");
	    return result;
	}

	
	
	
//	@Override
//	public Result execute(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//		Result result = new Result();
//		AdminDAO adminDAO = new AdminDAO();
//		AdminVO adminVO = new AdminVO();
//		HttpSession session = req.getSession();
//		String path = "/join.admin";
//		
//		AdminVO admin = (AdminVO) session.getAttribute("admin");
//		String sessionAdminAccount = admin.getAdminAccount();
//		boolean accountFlag = false;
//		
//		 if (admin == null) {
//		        System.out.println("❌ 세션에 저장된 admin 객체가 없습니다. 중복 검사 없이 진행합니다.");
//		 } else {
//		        System.out.println("✅ 세션에서 가져온 관리자 계정: " + admin.getAdminAccount());
//		  }
//		
//		
//		String adminAccount = req.getParameter("adminAccount");
//		String adminPassword = req.getParameter("adminPassword");
//		String adminName = req.getParameter("adminName");
//		String adminPhone = req.getParameter("adminPhone");
//		String adminEmail = req.getParameter("adminEmail");
//		
//		adminVO.setAdminAccount(adminAccount);
//		adminVO.setAdminPassword(adminPassword);
//		adminVO.setAdminName(adminName);
//		adminVO.setAdminPhone(adminPhone);
//		adminVO.setAdminEmail(adminEmail);
//		
//		if (admin == null || !admin.getAdminAccount().equals(adminAccount)) {
//	        Optional<AdminVO> foundAdmin = adminDAO.selectByAdminAccount(adminAccount);
//	        if (foundAdmin.isPresent()) {
//	            path += "?account=false";
//	            accountFlag = true;
//	        }
//	    }
//		if(!accountFlag) {
//			adminDAO.insert(adminVO);
//			session.setAttribute("admin", adminVO);
//		}
//		result.setPath("/login.admin");
//		
//		return result;
//	}
}
